{
  "permissions": {
    "allow": [
      "Bash(cp:*)",
      "Bash(curl:*)",
      "Bash(del:*)",
      "Bash(dir:*)",
      "Bash(do echo \"Request $i:\")",
      "Bash(done)",
      "Bash(echo:*)",
      "Bash(find:*)",
      "Bash(for i in {1..5})",
      "Bash(gh auth:*)",
      "Bash(gh repo create:*)",
      "Bash(gh repo delete:*)",
      "Bash(gh repo view:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh run:*)",
      "Bash(git add:*)",
      "Bash(git branch:*)",
      "Bash(git checkout:*)",
      "Bash(git clone:*)",
      "Bash(git commit:*)",
      "Bash(git filter-branch:*)",
      "Bash(git merge:*)",
      "Bash(git push:*)",
      "Bash(git rebase:*)",
      "Bash(git remote add:*)",
      "Bash(git remote rename:*)",
      "Bash(git remote set-url:*)",
      "Bash(git rm:*)",
      "Bash(git stash:*)",
      "Bash(grep:*)",
      "Bash(magick identify:*)",
      "Bash(mkdir:*)",
      "Bash(move:*)",
      "Bash(mv:*)",
      "Bash(node:*)",
      "Bash(npm audit:*)",
      "Bash(npm install:*)",
      "Bash(npm install)",
      "Bash(npm outdated:*)",
      "Bash(npm outdated)",
      "Bash(npm run build:*)",
      "Bash(npm run check:*)",
      "Bash(npm run dev:*)",
      "Bash(npm run lint)",
      "Bash(npm run:*)",
      "Bash(npm test)",
      "Bash(npm update:*)",
      "Bash(npm update)",
      "Bash(npx tsc:*)",
      "Bash(npx wrangler dev:*)",
      "Bash(npx:*)",
      "Bash(powershell:*)",
      "Bash(rd:*)",
      "Bash(rm:*)",
      "Bash(rmdir:*)",
      "Bash(robocopy:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(tree:*)",
      "Bash(wrangler deployments list:*)",
      "Bash(wrangler dev:*)",
      "mcp__serena",
      "Read(/c:\\Users\\henrik\\OneDrive\\Documents\\ShareX\\Screenshots\\2025-08/**)",
      "WebFetch(domain:developers.cloudflare.com)",
      "WebFetch(domain:developers.google.com)",
      "WebFetch(domain:docs.thulite.io)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:henriksoderlund-website-v2.krrsantan.workers.dev)",
      "WebFetch(domain:henriksoderlund-website-v2.par.workers.dev)",
      "WebFetch(domain:henriksoderlund.com)",
      "WebFetch(domain:llmstxt.org)",
      "WebFetch(domain:ogp.me)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:schema.org)",
      "WebFetch(domain:search.google.com)",
      "WebFetch(domain:validator.schema.org)",
      "WebFetch(domain:vite.dev)",
      "WebFetch(domain:www.cloudflare.com)",
      "WebFetch(domain:www.henriksoderlund.com)",
      "WebFetch(domain:www.indexnow.org)",
      "WebSearch"
    ],
    "deny": [],
    "ask": [],
    "defaultMode": "acceptEdits"
  },
  "enabledMcpjsonServers": [
    "serena",
    "playwright",
    "context7",
    "firecrawl-mcp"
  ],
  "hooks": {
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); agent=$(echo \"$input\" | jq -r \".subagent_name // empty\"); if [[ \"$agent\" == \"validation-gates\" ]]; then echo \"Validation gates completed. Running final checks...\" >&2; fi; echo \"{}\"'"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); prompt=$(echo \"$input\" | jq -r \".prompt // empty\"); if [[ \"$prompt\" =~ (test|validate|check) ]] && [[ ! \"$prompt\" =~ (skip|no|without).*(test|validation) ]]; then echo \"Reminder: Use the validation-gates subagent to ensure comprehensive testing.\" >&2; fi; echo \"{}\"'"
          }
        ]
      }
    ]
  },
  "enableAllProjectMcpServers": true
}